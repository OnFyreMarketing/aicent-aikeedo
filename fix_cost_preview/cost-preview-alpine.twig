<!-- Cost Preview Widget f√ºr Aikeedo -->
<div id="cost-preview-container" class="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 mb-4 border border-gray-200 dark:border-gray-700" x-data="costPreview()" x-show="showWidget" style="display: none;">
    
    <!-- Loading State -->
    <div x-show="isLoading" class="flex items-center gap-3 text-gray-600 dark:text-gray-400">
        <svg class="animate-spin h-5 w-5" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        <span class="text-sm">Kostensch√§tzung wird berechnet...</span>
    </div>
    
    <!-- Success Result -->
    <div x-show="!isLoading && result" class="space-y-3">
        <div class="flex items-center gap-2 mb-2">
            <span class="text-lg">üí∞</span>
            <h4 class="font-semibold text-gray-700 dark:text-gray-300">Kostensch√§tzung</h4>
        </div>
        
        <div class="grid grid-cols-2 gap-3 text-sm">
            <div class="bg-white dark:bg-gray-700 p-3 rounded">
                <div class="text-gray-500 dark:text-gray-400">Input Token</div>
                <div class="font-semibold text-gray-700 dark:text-gray-200" x-text="result?.input_tokens || '-'"></div>
            </div>
            <div class="bg-white dark:bg-gray-700 p-3 rounded">
                <div class="text-gray-500 dark:text-gray-400">Gesch√§tzte Ausgabe</div>
                <div class="font-semibold text-gray-700 dark:text-gray-200" x-text="result?.assumed_output_tokens || '-'"></div>
            </div>
        </div>
        
        <div class="bg-green-50 dark:bg-green-900/20 p-3 rounded">
            <div class="text-green-600 dark:text-green-400 text-sm">Gesch√§tzte Kosten</div>
            <div class="font-bold text-green-700 dark:text-green-300 text-lg" x-text="(result?.total_estimated_credits || '0') + ' Credits'"></div>
        </div>
        
        <div x-show="result?.message" class="text-xs text-gray-500 dark:text-gray-400 italic" x-text="result?.message"></div>
    </div>
    
    <!-- Error State -->
    <div x-show="!isLoading && error" class="bg-red-50 dark:bg-red-900/20 p-3 rounded">
        <div class="flex items-center gap-2 text-red-600 dark:text-red-400">
            <span>‚ö†Ô∏è</span>
            <span class="text-sm" x-text="error"></span>
        </div>
    </div>
</div>

<script>
function costPreview() {
    return {
        showWidget: false,
        isLoading: false,
        result: null,
        error: null,
        debounceTimer: null,
        currentRequest: null,
        
        init() {
            // Widget anzeigen
            this.showWidget = true;
            
            // Event Listener f√ºr Prompt-√Ñnderungen
            this.$watch('$store.chat.prompt', (value) => {
                this.handlePromptChange(value);
            });
            
            // Event Listener f√ºr Model-√Ñnderungen
            this.$watch('$store.chat.model', (value) => {
                if (this.$store.chat.prompt) {
                    this.handlePromptChange(this.$store.chat.prompt);
                }
            });
            
            console.log('Cost Preview Widget initialized');
        },
        
        handlePromptChange(prompt) {
            // Debounce
            clearTimeout(this.debounceTimer);
            
            // Reset bei leerem Prompt
            if (!prompt || prompt.length < 10) {
                this.result = null;
                this.error = null;
                return;
            }
            
            // Neue Anfrage nach Verz√∂gerung
            this.debounceTimer = setTimeout(() => {
                this.fetchCostEstimate(prompt);
            }, 500);
        },
        
        async fetchCostEstimate(prompt) {
            this.isLoading = true;
            this.error = null;
            
            // Vorherige Anfrage abbrechen
            if (this.currentRequest) {
                this.currentRequest.abort();
            }
            
            try {
                const controller = new AbortController();
                this.currentRequest = controller;
                
                const response = await fetch('/api/cost-preview/estimate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({
                        prompt: prompt,
                        model: this.$store.chat.model || window.currentModel || 'gpt-3.5-turbo'
                    }),
                    signal: controller.signal
                });
                
                const data = await response.json();
                
                if (data.success) {
                    this.result = data.data;
                } else {
                    this.error = data.message || 'Fehler bei der Kostensch√§tzung';
                }
            } catch (error) {
                if (error.name !== 'AbortError') {
                    console.error('Cost Preview Error:', error);
                    this.error = 'Kostensch√§tzung nicht verf√ºgbar';
                }
            } finally {
                this.isLoading = false;
                this.currentRequest = null;
            }
        }
    }
}
</script>
